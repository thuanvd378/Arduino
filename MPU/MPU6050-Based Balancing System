#include "I2Cdev.h"

#include "MPU6050_6Axis_MotionApps20.h"
#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
#include "Wire.h"
#endif
#include <Servo.h>
#include <Kalman.h>

Kalman kalmanX;
Kalman kalmanY;
Kalman kalmanZ;
int16_t gyroX, gyroY, gyroZ;
float gyroXrate = 0; // Replace with actual gyro rate
float gyroYrate = 0; // Replace with actual gyro rate
float gyroZrate = 0; // Replace with actual gyro rate
float dt = 0.01; // Replace with actual delta time

MPU6050 mpu;
Servo servo0;
Servo servo1;
Servo servo2;
float correct;
int j = 0;


#define OUTPUT_READABLE_YAWPITCHROLL

#define INTERRUPT_PIN 2  

bool blinkState = false;

// MPU control/status vars
bool dmpReady = false;  // set true if DMP init was successful
uint8_t mpuIntStatus;   // holds actual interrupt status byte from MPU
uint8_t devStatus;      // return status after each device operation (0 = success, !0 = error)
uint16_t packetSize;    // expected DMP packet size (default is 42 bytes)
uint16_t fifoCount;     // count of all bytes currently in FIFO
uint8_t fifoBuffer[64]; // FIFO storage buffer

// orientation/motion vars
Quaternion q;           // [w, x, y, z]         quaternion container
VectorInt16 aa;         // [x, y, z]            accel sensor measurements
VectorInt16 aaReal;     // [x, y, z]            gravity-free accel sensor measurements
VectorInt16 aaWorld;    // [x, y, z]            world-frame accel sensor measurements
VectorFloat gravity;    // [x, y, z]            gravity vector
float euler[3];         // [psi, theta, phi]    Euler angle container
float ypr[3];           // [yaw, pitch, roll]   yaw/pitch/roll container and gravity vector

// packet structure for InvenSense teapot demo
uint8_t teapotPacket[14] = { '$', 0x02, 0, 0, 0, 0, 0, 0, 0, 0, 0x00, 0x00, '\r', '\n' };

// ================================================================
// ===               INTERRUPT DETECTION ROUTINE                ===
// ================================================================

volatile bool mpuInterrupt = false;     // indicates whether MPU interrupt pin has gone high
void dmpDataReady() {
  mpuInterrupt = true;
}

// ================================================================
// ===                        OUTPUT                            ===
// ================================================================
void plotterOut(float x, float y, float z) {
      Serial.print(x);
      Serial.print("\t");
      Serial.print(y);
      Serial.print("\t");
      Serial.println(z);
      Serial.print("\t");
}
void servoOut(float x, float y, float z) {
      int servo0Value = map(x, -90, 90, 0, 180);
      int servo1Value = map(y, -90, 90, 0, 180);
      int servo2Value = map(z, -90, 90, 180, 0);
      
      servo0.write(servo0Value);
      servo1.write(servo1Value);
      servo2.write(servo2Value); 
}

// ================================================================
// ===                      INITIAL SETUP                       ===
// ================================================================
void setup() {
    kalmanX.setAngle(0);
    kalmanY.setAngle(0);
    kalmanZ.setAngle(0);
  // join I2C bus (I2Cdev library doesn't do this automatically)
#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
  Wire.begin();
  Wire.setClock(400000); // 400kHz I2C clock. Comment this line if having compilation difficulties
#elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
  Fastwire::setup(400, true);
#endif

  // initialize serial communication
  // (115200 chosen because it is required for Teapot Demo output, but it's
  // really up to you depending on your project)
  Serial.begin(38400);
  while (!Serial); // wait for Leonardo enumeration, others continue immediately

  // initialize device
  //Serial.println(F("Initializing I2C devices..."));
  mpu.initialize();
  pinMode(INTERRUPT_PIN, INPUT);
  devStatus = mpu.dmpInitialize();
  // supply your own gyro offsets here, scaled for min sensitivity
  mpu.setXGyroOffset(17);
  mpu.setYGyroOffset(-69);
  mpu.setZGyroOffset(27);
  mpu.setZAccelOffset(1551); // 1688 factory default for my test chip

  // make sure it worked (returns 0 if so)
  if (devStatus == 0) {
    // turn on the DMP, now that it's ready
    // Serial.println(F("Enabling DMP..."));
    mpu.setDMPEnabled(true);

    attachInterrupt(digitalPinToInterrupt(INTERRUPT_PIN), dmpDataReady, RISING);
    mpuIntStatus = mpu.getIntStatus();

    // set our DMP Ready flag so the main loop() function knows it's okay to use it
    //Serial.println(F("DMP ready! Waiting for first interrupt..."));
    dmpReady = true;

    // get expected DMP packet size for later comparison
    packetSize = mpu.dmpGetFIFOPacketSize();
  } else {
    // ERROR!
    // 1 = initial memory load failed
    // 2 = DMP configuration updates failed
    // (if it's going to break, usually the code will be 1)
    // Serial.print(F("DMP Initialization failed (code "));
    //Serial.print(devStatus);
    //Serial.println(F(")"));
  }

  // Define the pins to which the 3 servo motors are connected
  servo0.attach(10);
  servo1.attach(9);
  servo2.attach(8);
}

// ================================================================
// ===                        FILTER                            ===
// ================================================================
float alpha = 0.03;
float lastYPR[3] = {0, 0, 0};
void lowPassFilter(const float* input, float &x, float &y, float &z) {
    float filteredYPR[3];
    for (int i = 0; i < 3; i++) {
        filteredYPR[i] = alpha * input[i] + (1 - alpha) * lastYPR[i];
        lastYPR[i] = filteredYPR[i];
    }
    x = filteredYPR[0];
    y = filteredYPR[1];
    z = filteredYPR[2];
}
void lowPassFilter2(float &x1, float &y1, float &z1, const float &x, const float &y, const float &z) {
    x1 = alpha * x + (1 - alpha) * lastYPR[0];
    lastYPR[0] = x1;
    y1 = alpha * y + (1 - alpha) * lastYPR[1];
    lastYPR[1] = y1;
    z1 = alpha * z + (1 - alpha) * lastYPR[2];
    lastYPR[2] = z1;
}
void Kalman(const float *ypr, float &x, float &y, float &z) {
  mpu.getRotation(&gyroX, &gyroY, &gyroZ);
  gyroXrate = gyroX / 131.0;
  gyroYrate = gyroY / 131.0;
  gyroZrate = gyroZ / 131.0;
  x = kalmanX.getAngle(ypr[0], gyroXrate, dt);
  y = kalmanY.getAngle(ypr[1], gyroYrate, dt);
  z = kalmanZ.getAngle(ypr[2], gyroZrate, dt);
}


// ================================================================
// ===                    MAIN PROGRAM LOOP                     ===
// ================================================================

void loop() {
  // if programming failed, don't try to do anything
  if (!dmpReady) return;

  // wait for MPU interrupt or extra packet(s) available
  while (!mpuInterrupt && fifoCount < packetSize) {
    if (mpuInterrupt && fifoCount < packetSize) {
      // try to get out of the infinite loop
      fifoCount = mpu.getFIFOCount();
    }
  }

  // reset interrupt flag and get INT_STATUS byte
  mpuInterrupt = false;
  mpuIntStatus = mpu.getIntStatus();

  // get current FIFO count
  fifoCount = mpu.getFIFOCount();

  // check for overflow (this should never happen unless our code is too inefficient)
  if ((mpuIntStatus & _BV(MPU6050_INTERRUPT_FIFO_OFLOW_BIT)) || fifoCount >= 1024) {
    // reset so we can continue cleanly
    mpu.resetFIFO();
    fifoCount = mpu.getFIFOCount();
    Serial.println(F("FIFO overflow!"));

    // otherwise, check for DMP data ready interrupt (this should happen frequently)
  } else if (mpuIntStatus & _BV(MPU6050_INTERRUPT_DMP_INT_BIT)) {
    // wait for correct available data length, should be a VERY short wait
    while (fifoCount < packetSize) fifoCount = mpu.getFIFOCount();

    // read a packet from FIFO
    mpu.getFIFOBytes(fifoBuffer, packetSize);

    // track FIFO count here in case there is > 1 packet available
    // (this lets us immediately read more without waiting for an interrupt)
    fifoCount -= packetSize;

    // Get Yaw, Pitch and Roll values
#ifdef OUTPUT_READABLE_YAWPITCHROLL
    mpu.dmpGetQuaternion(&q, fifoBuffer);
    mpu.dmpGetGravity(&gravity, &q);
    mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
    // Yaw, Pitch, Roll values - Radians to degrees
    ypr[0] = ypr[0] * 180 / M_PI;
    ypr[1] = ypr[1] * 180 / M_PI;
    ypr[2] = ypr[2] * 180 / M_PI;
    // Skip 300 readings (self-calibration process)
    if (j <= 300) {
      correct = ypr[0]; // Yaw starts at random value, so we capture last value after 300 readings
      j++;
    }
    // After 300 readings
    else {
      ypr[0] = ypr[0] - correct; // Set the Yaw to 0 deg - subtract  the last random Yaw value from the currrent value to make the Yaw 0 degrees
      // Map the values of the MPU6050 sensor from -90 to 90 to values suatable for the servo control from 0 to 180
      float x,y,z;
      float x1,y1,z1;

      //=======KALMAN==================
      Kalman(ypr,x,y,z);
      //===============================

      //========LOW_PASS_FILTER========
      lowPassFilter2(x1, y1, z1, x, y, z);
      //===============================
    

      //==========OUTPUT============
      plotterOut(x1,y1,z1);
      servoOut(x,y,z);
    } 
#endif
  } 
}
